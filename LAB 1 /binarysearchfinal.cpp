#include<iostream>
#include<chrono>
#include<algorithm>
using namespace std;
using namespace std :: chrono ; 
 

int bsalgoritm(int arr[],int n , int goal)
{
    int low = 0 ; int high = n-1  ;

    while (low<=high)
    {
        int middle= low + (high - low) / 2;

        if(arr[middle]==goal)
            return middle; 

        else if (arr[middle]<goal)

        low = middle+1;

        else 
            high = middle -1 ; 

    }

   return -1 ; 
    
}

int main()
{
    auto start = high_resolution_clock::now();
    //edge cases 
    int arr1[] = {};
    int arr2[] = {5};               
    int arr3[] = {1, 2};           
    int arr4[] = {1, 3, 5, 7, 9};   
    int arr5[] = {1, 3, 5, 7, 9, 11};
    int arr6[] = {-10, -5, 0, 5, 10}; 
    sort (arr6,arr6+4);
    int arr7[] = {1, 2, 2, 2, 3, 4};
    int arr8[]= { 1,2,3,4,5}; 
    int arr9[]= {20000, 30000,68888,98888}; 

    cout << "Empty array: Index " << bsalgoritm(arr1, 0, 5) << endl;
    cout << "Single element: Index " << bsalgoritm(arr2, 1, 5) << endl;
    cout << "Two elements: Index " << bsalgoritm(arr3, 2, 1) << endl;
    cout << "Odd length: Index " << bsalgoritm(arr4, 5, 7) << endl;
    cout << "Even length: Index " << bsalgoritm(arr5, 6, 11) << endl;
    cout << "Negatives: Index " << bsalgoritm(arr6, 5, -5) << endl;
    cout << "Duplicates: Index " << bsalgoritm(arr7, 6, 2) << endl;
    cout<<"  element does not exist in the array" << bsalgoritm(arr8,4,6)<<endl;
    cout<< " large array "<< bsalgoritm(arr9,3,30000)<<endl; 

     
     
    auto stop = high_resolution_clock::now();

    
    auto duration = duration_cast<nanoseconds>(stop - start);

    
    cout << "Execution time for : " << duration.count() << " nanoseconds" << endl;


    // test cases 
    // 5 best cases 
{
    int arr10[] = { 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,17,18,19,20};
            auto start = high_resolution_clock::now();

        cout<<" test case 1 taget element index:" << bsalgoritm(arr10,19,10);
            auto stop = high_resolution_clock::now();
    auto duration = duration_cast<nanoseconds>(stop - start);
    cout << "Execution time for : " << duration.count() << " nanoseconds" << endl;

}
{
    int arr11[]={453, 892, 178, 601, 345, 720, 57, 938, 312, 821,
 500, 639, 72, 417, 284, 95, 653, 726, 829, 316,
 118, 765, 284, 432, 519, 947, 850, 674, 389, 274,
 631, 511, 498, 294, 362, 419, 821, 183, 764, 555,
 243, 684, 325, 901, 72, 586, 394, 832, 495, 368,
 751, 624, 885, 249, 127, 310, 671, 532, 460, 799,
 284, 978, 316, 485, 268, 391, 446, 223, 524, 818,
 602, 315, 927, 333, 712, 201, 852, 675, 94, 752,
 664, 433, 210, 596, 874, 509, 722, 417, 378, 541,
 801, 468, 562, 116, 385, 999, 703, 295, 419, 611};
 sort(arr11,arr11+100);

            auto start = high_resolution_clock::now();

        cout<<" test case 2 taget element index:" << bsalgoritm(arr11,100,368);
            auto stop = high_resolution_clock::now();
    auto duration = duration_cast<nanoseconds>(stop - start);
    cout << "Execution time for : " << duration.count() << " nanoseconds" << endl;

}
{
    int arr12[] = {
812, 233, 547, 999, 71, 453, 648, 395, 824, 179,
937, 522, 603, 284, 427, 912, 336, 754, 605, 879,
394, 150, 787, 967, 381, 274, 699, 444, 83, 216,
508, 174, 668, 851, 632, 247, 385, 902, 315, 778,
590, 904, 99, 472, 851, 763, 550, 697, 411, 355,
286, 470, 881, 927, 310, 640, 234, 451, 707, 580,
267, 776, 330, 190, 915, 602, 748, 812, 423, 520,
289, 955, 624, 315, 287, 758, 381, 905, 198, 731,
281, 601, 490, 882, 379, 517, 343, 690, 186, 740,
627, 567, 842, 504, 300, 199, 653, 615, 708, 840,
454, 614, 563, 328, 715, 270, 407, 912, 750, 835,
622, 914, 551, 203, 299, 817, 592, 301, 888, 427,
144, 961, 311, 684, 893, 243, 647, 914, 382, 905,
504, 668, 481, 830, 210, 747, 415, 923, 526, 634,
612, 585, 311, 774, 362, 825, 936, 495, 643, 709,
373, 963, 511, 618, 489, 975, 148, 331, 628, 927,
216, 391, 646, 785, 428, 907, 353, 695, 602, 588,
680, 472, 404, 217, 887, 564, 312, 784, 258, 636,
791, 665, 883, 466, 201, 823, 631, 478, 747, 932,
784, 622, 410, 773, 544, 829, 694, 365, 732, 934,
315, 866, 494, 534, 120, 624, 318, 919, 593, 470,
452, 926, 191, 456, 635, 798, 900, 289, 457, 782,
607, 826, 667, 728, 118, 812, 708, 651, 427, 945,
564, 873, 209, 315, 671, 384, 681, 256, 392, 759,
282, 541, 722, 530, 341, 899, 775, 572, 476, 939,
657, 560, 688, 370, 764, 549, 823, 765, 299, 198,
999, 567, 707, 245, 501, 625, 718, 320, 896, 502,
383, 880, 154, 442, 976, 452, 812, 557, 743, 953,
449, 718, 172, 834, 594, 621, 302, 809, 188, 420,
712, 548, 648, 222, 877, 373, 755, 278, 635, 955,
439, 517, 889, 773, 642, 385, 517, 536, 476, 691,
648, 519, 739, 401, 967, 380, 574, 688, 694, 900,
487, 590, 618, 873, 423, 927, 476, 855, 658, 544,
519, 267, 621, 395, 587, 328, 930, 405, 885, 668,
689, 218, 455, 745, 229, 921, 554, 873, 394, 935,
360, 671, 915, 683, 523, 407, 208, 847, 703, 500,
434, 669, 938, 263, 903, 842, 345, 902, 704, 165,
673, 616, 729, 373, 622, 930, 457, 208, 621, 401,
582, 830, 648, 292, 923, 328, 708, 602, 189, 832,
646, 411, 791, 268, 820, 666, 774, 251, 790, 405,
205, 532, 830, 709, 274, 981, 532, 395, 627, 841,
394, 702, 318, 539, 240, 911, 746, 316, 970, 527,
581, 812, 705, 491, 546, 705, 922, 491, 856, 709,
915, 584, 381, 675, 281, 499, 895, 361, 681, 423,
 401, 529, 210, 854, 646, 497, 930, 623, 793, 360

};

     sort(arr12,arr12+500);
            auto start = high_resolution_clock::now();

        cout<<" test case 3 taget element index:" << bsalgoritm(arr12,500,476);
            auto stop = high_resolution_clock::now();
    auto duration = duration_cast<nanoseconds>(stop - start);
    cout << "Execution time for : " << duration.count() << " nanoseconds" << endl;

}
{
    int arr13[] = {
        562, 437, 994, 789, 107, 888, 473, 341, 626, 798,
982, 601, 912, 236, 529, 805, 443, 149, 732, 611,
924, 867, 289, 315, 876, 754, 408, 958, 713, 525,
471, 383, 955, 244, 160, 921, 397, 281, 847, 703,
523, 370, 272, 118, 927, 678, 205, 796, 595, 462,
832, 301, 745, 267, 628, 471, 156, 794, 690, 511,
525, 389, 705, 613, 251, 919, 690, 865, 423, 582,
346, 953, 570, 880, 420, 385, 726, 790, 603, 515,
482, 188, 963, 291, 882, 426, 802, 321, 998, 400,
127, 742, 969, 502, 842, 451, 326, 798, 292, 680,

879, 231, 583, 957, 468, 146, 571, 888, 630, 369,
544, 839, 164, 590, 935, 727, 451, 884, 328, 719,
254, 899, 678, 160, 932, 407, 546, 684, 190, 578,
446, 341, 849, 229, 481, 987, 376, 944, 118, 802,
409, 588, 943, 392, 872, 268, 664, 415, 901, 363,
374, 593, 764, 541, 759, 679, 803, 450, 687, 905,
148, 973, 824, 321, 346, 613, 599, 563, 889, 518,
721, 217, 640, 880, 264, 817, 995, 527, 210, 706,
508, 897, 759, 604, 149, 701, 985, 374, 696, 581,
467, 808, 713, 194, 832, 657, 213, 576, 842, 993,

373, 203, 425, 926, 460, 128, 777, 365, 588, 462,
184, 937, 772, 669, 908, 334, 696, 575, 318, 867,
312, 561, 753, 458, 917, 205, 335, 590, 846, 429,
486, 274, 936, 655, 123, 944, 872, 444, 689, 539,
618, 262, 998, 349, 651, 470, 892, 603, 782, 930,
438, 276, 602, 567, 300, 998, 612, 785, 954, 553,
394, 631, 926, 379, 876, 503, 659, 142, 966, 409,
505, 850, 695, 429, 943, 237, 749, 533, 321, 985,
625, 192, 882, 703, 566, 972, 734, 167, 812, 499,
790, 653, 930, 566, 444, 368, 983, 213, 546, 877,
183, 921, 342, 715, 495, 625, 890, 319, 952, 176,
536, 830, 681, 484, 292, 757, 939, 618, 269, 503,
878, 627, 169, 905, 752, 318, 976, 402, 714, 852,
299, 577, 448, 675, 324, 803, 277, 937, 433, 508,
584, 927, 183, 597, 778, 640, 815, 360, 520, 778,
902, 161, 765, 986, 273, 604, 483, 720, 957, 308,
324, 596, 817, 229, 476, 753, 634, 540, 221, 974,
784, 202, 599, 855, 245, 694, 355, 901, 470, 845,
403, 712, 691, 324, 556, 791, 997, 499, 254, 884,
423, 739, 615, 452, 939, 620, 260, 734, 351, 974,

830, 320, 591, 461, 276, 663, 819, 538, 361, 573,
230, 718, 887, 646, 297, 794, 551, 497, 277, 981,
729, 561, 924, 338, 800, 637, 556, 241, 977, 531,
199, 658, 992, 473, 183, 875, 289, 998, 362, 716,
659, 782, 370, 440, 825, 269, 847, 614, 789, 946,
703, 251, 640, 798, 586, 922, 467, 562, 302, 739,
814, 162, 680, 464, 905, 251, 692, 810, 298, 635,
864, 159, 949, 561, 307, 991, 240, 855, 579, 781,
865, 413, 920, 543, 274, 639, 925, 215, 591, 702,
759, 442, 639, 975, 214, 561, 482, 998, 322, 814,

956, 327, 545, 836, 297, 703, 479, 934, 300, 653,
284, 957, 706, 546, 667, 924, 431, 264, 826, 789,
368, 630, 854, 275, 900, 679, 522, 986, 387, 621,
993, 436, 554, 227, 875, 646, 399, 821, 647, 275,
768, 244, 846, 999, 482, 594, 326, 473, 701, 212,
736, 990, 354, 446, 667, 296, 881, 523, 619, 914,
800, 190, 847, 737, 690, 937, 563, 429, 631, 456,
993, 524, 673, 828, 372, 934, 527, 668, 865, 944,
382, 721, 495, 589, 331, 854, 605, 749, 625, 203,
968, 214, 635, 778, 292, 570, 648, 931, 378, 853



    };
    sort (arr13,arr13+1000);
            auto start = high_resolution_clock::now();

        cout<<" test case 4 taget element index:" << bsalgoritm(arr13,1000,444);
            auto stop = high_resolution_clock::now();
    auto duration = duration_cast<nanoseconds>(stop - start);
    cout << "Execution time for : " << duration.count() << " nanoseconds" << endl;
}
{
    int arr14[]= {100,200,300,400,500};
     sort(arr14,arr14+5);
        auto start = high_resolution_clock::now();

    cout<<" test case 5 taget element index:" << bsalgoritm(arr14,5,300);
        auto stop = high_resolution_clock::now();
    auto duration = duration_cast<nanoseconds>(stop - start);
    cout << "Execution time for : " << duration.count() << " nanoseconds" << endl;

}
{//worst cses 
    int arr15[] = { 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,17,18,19,20};
            auto start = high_resolution_clock::now();

        cout<<" test case 1 taget element index:" << bsalgoritm(arr15,19,30);
            auto stop = high_resolution_clock::now();
    auto duration = duration_cast<nanoseconds>(stop - start);
    cout << "Execution time for : " << duration.count() << " nanoseconds" << endl;
}
{
int arr16[]={453, 892, 178, 601, 345, 720, 57, 938, 312, 821,
 500, 639, 72, 417, 284, 95, 653, 726, 829, 316,
 118, 765, 284, 432, 519, 947, 850, 674, 389, 274,
 631, 511, 498, 294, 362, 419, 821, 183, 764, 555,
 243, 684, 325, 901, 72, 586, 394, 832, 495, 368,
 751, 624, 885, 249, 127, 310, 671, 532, 460, 799,
 284, 978, 316, 485, 268, 391, 446, 223, 524, 818,
 602, 315, 927, 333, 712, 201, 852, 675, 94, 752,
 664, 433, 210, 596, 874, 509, 722, 417, 378, 541,
 801, 468, 562, 116, 385, 999, 703, 295, 419, 611};
 sort(arr16,arr16+100);          
 auto start = high_resolution_clock::now();

        cout<<" test case 2 taget element index:" << bsalgoritm(arr16,100,3);
            auto stop = high_resolution_clock::now();
    auto duration = duration_cast<nanoseconds>(stop - start);
    cout << "Execution time for : " << duration.count() << " nanoseconds" << endl;
}
{
    int arr17[] = {
812, 233, 547, 999, 71, 453, 648, 395, 824, 179,
937, 522, 603, 284, 427, 912, 336, 754, 605, 879,
394, 150, 787, 967, 381, 274, 699, 444, 83, 216,
508, 174, 668, 851, 632, 247, 385, 902, 315, 778,
590, 904, 99, 472, 851, 763, 550, 697, 411, 355,
286, 470, 881, 927, 310, 640, 234, 451, 707, 580,
267, 776, 330, 190, 915, 602, 748, 812, 423, 520,
289, 955, 624, 315, 287, 758, 381, 905, 198, 731,
281, 601, 490, 882, 379, 517, 343, 690, 186, 740,
627, 567, 842, 504, 300, 199, 653, 615, 708, 840,
454, 614, 563, 328, 715, 270, 407, 912, 750, 835,
622, 914, 551, 203, 299, 817, 592, 301, 888, 427,
144, 961, 311, 684, 893, 243, 647, 914, 382, 905,
504, 668, 481, 830, 210, 747, 415, 923, 526, 634,
612, 585, 311, 774, 362, 825, 936, 495, 643, 709,
373, 963, 511, 618, 489, 975, 148, 331, 628, 927,
216, 391, 646, 785, 428, 907, 353, 695, 602, 588,
680, 472, 404, 217, 887, 564, 312, 784, 258, 636,
791, 665, 883, 466, 201, 823, 631, 478, 747, 932,
784, 622, 410, 773, 544, 829, 694, 365, 732, 934,
315, 866, 494, 534, 120, 624, 318, 919, 593, 470,
452, 926, 191, 456, 635, 798, 900, 289, 457, 782,
607, 826, 667, 728, 118, 812, 708, 651, 427, 945,
564, 873, 209, 315, 671, 384, 681, 256, 392, 759,
282, 541, 722, 530, 341, 899, 775, 572, 476, 939,
657, 560, 688, 370, 764, 549, 823, 765, 299, 198,
999, 567, 707, 245, 501, 625, 718, 320, 896, 502,
383, 880, 154, 442, 976, 452, 812, 557, 743, 953,
449, 718, 172, 834, 594, 621, 302, 809, 188, 420,
712, 548, 648, 222, 877, 373, 755, 278, 635, 955,
439, 517, 889, 773, 642, 385, 517, 536, 476, 691,
648, 519, 739, 401, 967, 380, 574, 688, 694, 900,
487, 590, 618, 873, 423, 927, 476, 855, 658, 544,
519, 267, 621, 395, 587, 328, 930, 405, 885, 668,
689, 218, 455, 745, 229, 921, 554, 873, 394, 935,
360, 671, 915, 683, 523, 407, 208, 847, 703, 500,
434, 669, 938, 263, 903, 842, 345, 902, 704, 165,
673, 616, 729, 373, 622, 930, 457, 208, 621, 401,
582, 830, 648, 292, 923, 328, 708, 602, 189, 832,
646, 411, 791, 268, 820, 666, 774, 251, 790, 405,
205, 532, 830, 709, 274, 981, 532, 395, 627, 841,
394, 702, 318, 539, 240, 911, 746, 316, 970, 527,
581, 812, 705, 491, 546, 705, 922, 491, 856, 709,
915, 584, 381, 675, 281, 499, 895, 361, 681, 423,
 401, 529, 210, 854, 646, 497, 930, 623, 793, 360

};

     sort(arr17,arr17+500);
    
            auto start = high_resolution_clock::now();

        cout<<" test case 3 taget element index:" << bsalgoritm(arr17,500,2);
            auto stop = high_resolution_clock::now();
    auto duration = duration_cast<nanoseconds>(stop - start);
    cout << "Execution time for : " << duration.count() << " nanoseconds" << endl;
}
{
    int arr18[] = {
        562, 437, 994, 789, 107, 888, 473, 341, 626, 798,
982, 601, 912, 236, 529, 805, 443, 149, 732, 611,
924, 867, 289, 315, 876, 754, 408, 958, 713, 525,
471, 383, 955, 244, 160, 921, 397, 281, 847, 703,
523, 370, 272, 118, 927, 678, 205, 796, 595, 462,
832, 301, 745, 267, 628, 471, 156, 794, 690, 511,
525, 389, 705, 613, 251, 919, 690, 865, 423, 582,
346, 953, 570, 880, 420, 385, 726, 790, 603, 515,
482, 188, 963, 291, 882, 426, 802, 321, 998, 400,
127, 742, 969, 502, 842, 451, 326, 798, 292, 680,

879, 231, 583, 957, 468, 146, 571, 888, 630, 369,
544, 839, 164, 590, 935, 727, 451, 884, 328, 719,
254, 899, 678, 160, 932, 407, 546, 684, 190, 578,
446, 341, 849, 229, 481, 987, 376, 944, 118, 802,
409, 588, 943, 392, 872, 268, 664, 415, 901, 363,
374, 593, 764, 541, 759, 679, 803, 450, 687, 905,
148, 973, 824, 321, 346, 613, 599, 563, 889, 518,
721, 217, 640, 880, 264, 817, 995, 527, 210, 706,
508, 897, 759, 604, 149, 701, 985, 374, 696, 581,
467, 808, 713, 194, 832, 657, 213, 576, 842, 993,

373, 203, 425, 926, 460, 128, 777, 365, 588, 462,
184, 937, 772, 669, 908, 334, 696, 575, 318, 867,
312, 561, 753, 458, 917, 205, 335, 590, 846, 429,
486, 274, 936, 655, 123, 944, 872, 444, 689, 539,
618, 262, 998, 349, 651, 470, 892, 603, 782, 930,
438, 276, 602, 567, 300, 998, 612, 785, 954, 553,
394, 631, 926, 379, 876, 503, 659, 142, 966, 409,
505, 850, 695, 429, 943, 237, 749, 533, 321, 985,
625, 192, 882, 703, 566, 972, 734, 167, 812, 499,
790, 653, 930, 566, 444, 368, 983, 213, 546, 877,
183, 921, 342, 715, 495, 625, 890, 319, 952, 176,
536, 830, 681, 484, 292, 757, 939, 618, 269, 503,
878, 627, 169, 905, 752, 318, 976, 402, 714, 852,
299, 577, 448, 675, 324, 803, 277, 937, 433, 508,
584, 927, 183, 597, 778, 640, 815, 360, 520, 778,
902, 161, 765, 986, 273, 604, 483, 720, 957, 308,
324, 596, 817, 229, 476, 753, 634, 540, 221, 974,
784, 202, 599, 855, 245, 694, 355, 901, 470, 845,
403, 712, 691, 324, 556, 791, 997, 499, 254, 884,
423, 739, 615, 452, 939, 620, 260, 734, 351, 974,

830, 320, 591, 461, 276, 663, 819, 538, 361, 573,
230, 718, 887, 646, 297, 794, 551, 497, 277, 981,
729, 561, 924, 338, 800, 637, 556, 241, 977, 531,
199, 658, 992, 473, 183, 875, 289, 998, 362, 716,
659, 782, 370, 440, 825, 269, 847, 614, 789, 946,
703, 251, 640, 798, 586, 922, 467, 562, 302, 739,
814, 162, 680, 464, 905, 251, 692, 810, 298, 635,
864, 159, 949, 561, 307, 991, 240, 855, 579, 781,
865, 413, 920, 543, 274, 639, 925, 215, 591, 702,
759, 442, 639, 975, 214, 561, 482, 998, 322, 814,

956, 327, 545, 836, 297, 703, 479, 934, 300, 653,
284, 957, 706, 546, 667, 924, 431, 264, 826, 789,
368, 630, 854, 275, 900, 679, 522, 986, 387, 621,
993, 436, 554, 227, 875, 646, 399, 821, 647, 275,
768, 244, 846, 999, 482, 594, 326, 473, 701, 212,
736, 990, 354, 446, 667, 296, 881, 523, 619, 914,
800, 190, 847, 737, 690, 937, 563, 429, 631, 456,
993, 524, 673, 828, 372, 934, 527, 668, 865, 944,
382, 721, 495, 589, 331, 854, 605, 749, 625, 203,
968, 214, 635, 778, 292, 570, 648, 931, 378, 853



    };
    sort (arr18,arr18+1000);
            auto start = high_resolution_clock::now();

        cout<<" test case 4 taget element index:" << bsalgoritm(arr18,1000,1);
            auto stop = high_resolution_clock::now();
    auto duration = duration_cast<nanoseconds>(stop - start);
    cout << "Execution time for : " << duration.count() << " nanoseconds" << endl;
}
{ 
    int arr19[]= {10,20,30,40,50};
    std :: sort(arr19,arr19+5);
        auto start = high_resolution_clock::now();

    cout<<" test case 5 taget element index:" << bsalgoritm(arr19,5,60);
        auto stop = high_resolution_clock::now();
    auto duration = duration_cast<nanoseconds>(stop - start);
    cout << "Execution time for : " << duration.count() << " nanoseconds" << endl;
}

// average cases
{
    int arr20[] = { 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,17,18,19,20};
            auto start = high_resolution_clock::now();

        cout<<" test case 1 taget element index:" << bsalgoritm(arr20,19,10);
            auto stop = high_resolution_clock::now();
    auto duration = duration_cast<nanoseconds>(stop - start);
    cout << "Execution time for : " << duration.count() << " nanoseconds" << endl;
}
{
    int arr21[]={453, 892, 178, 601, 345, 720, 57, 938, 312, 821,
 500, 639, 72, 417, 284, 95, 653, 726, 829, 316,
 118, 765, 284, 432, 519, 947, 850, 674, 389, 274,
 631, 511, 498, 294, 362, 419, 821, 183, 764, 555,
 243, 684, 325, 901, 72, 586, 394, 832, 495, 368,
 751, 624, 885, 249, 127, 310, 671, 532, 460, 799,
 284, 978, 316, 485, 268, 391, 446, 223, 524, 818,
 602, 315, 927, 333, 712, 201, 852, 675, 94, 752,
 664, 433, 210, 596, 874, 509, 722, 417, 378, 541,
 801, 468, 562, 116, 385, 999, 703, 295, 419, 611};
 sort(arr21,arr21+100);
            auto start = high_resolution_clock::now();

        cout<<" test case 2 taget element index:" << bsalgoritm(arr21,100,799);
            auto stop = high_resolution_clock::now();
    auto duration = duration_cast<nanoseconds>(stop - start);
    cout << "Execution time for : " << duration.count() << " nanoseconds" << endl;
}

{
    int arr22[] =  {
812, 233, 547, 999, 71, 453, 648, 395, 824, 179,
937, 522, 603, 284, 427, 912, 336, 754, 605, 879,
394, 150, 787, 967, 381, 274, 699, 444, 83, 216,
508, 174, 668, 851, 632, 247, 385, 902, 315, 778,
590, 904, 99, 472, 851, 763, 550, 697, 411, 355,
286, 470, 881, 927, 310, 640, 234, 451, 707, 580,
267, 776, 330, 190, 915, 602, 748, 812, 423, 520,
289, 955, 624, 315, 287, 758, 381, 905, 198, 731,
281, 601, 490, 882, 379, 517, 343, 690, 186, 740,
627, 567, 842, 504, 300, 199, 653, 615, 708, 840,
454, 614, 563, 328, 715, 270, 407, 912, 750, 835,
622, 914, 551, 203, 299, 817, 592, 301, 888, 427,
144, 961, 311, 684, 893, 243, 647, 914, 382, 905,
504, 668, 481, 830, 210, 747, 415, 923, 526, 634,
612, 585, 311, 774, 362, 825, 936, 495, 643, 709,
373, 963, 511, 618, 489, 975, 148, 331, 628, 927,
216, 391, 646, 785, 428, 907, 353, 695, 602, 588,
680, 472, 404, 217, 887, 564, 312, 784, 258, 636,
791, 665, 883, 466, 201, 823, 631, 478, 747, 932,
784, 622, 410, 773, 544, 829, 694, 365, 732, 934,
315, 866, 494, 534, 120, 624, 318, 919, 593, 470,
452, 926, 191, 456, 635, 798, 900, 289, 457, 782,
607, 826, 667, 728, 118, 812, 708, 651, 427, 945,
564, 873, 209, 315, 671, 384, 681, 256, 392, 759,
282, 541, 722, 530, 341, 899, 775, 572, 476, 939,
657, 560, 688, 370, 764, 549, 823, 765, 299, 198,
999, 567, 707, 245, 501, 625, 718, 320, 896, 502,
383, 880, 154, 442, 976, 452, 812, 557, 743, 953,
449, 718, 172, 834, 594, 621, 302, 809, 188, 420,
712, 548, 648, 222, 877, 373, 755, 278, 635, 955,
439, 517, 889, 773, 642, 385, 517, 536, 476, 691,
648, 519, 739, 401, 967, 380, 574, 688, 694, 900,
487, 590, 618, 873, 423, 927, 476, 855, 658, 544,
519, 267, 621, 395, 587, 328, 930, 405, 885, 668,
689, 218, 455, 745, 229, 921, 554, 873, 394, 935,
360, 671, 915, 683, 523, 407, 208, 847, 703, 500,
434, 669, 938, 263, 903, 842, 345, 902, 704, 165,
673, 616, 729, 373, 622, 930, 457, 208, 621, 401,
582, 830, 648, 292, 923, 328, 708, 602, 189, 832,
646, 411, 791, 268, 820, 666, 774, 251, 790, 405,
205, 532, 830, 709, 274, 981, 532, 395, 627, 841,
394, 702, 318, 539, 240, 911, 746, 316, 970, 527,
581, 812, 705, 491, 546, 705, 922, 491, 856, 709,
915, 584, 381, 675, 281, 499, 895, 361, 681, 423,
 401, 529, 210, 854, 646, 497, 930, 623, 793, 360

};

     sort(arr22,arr22+500);
     
            auto start = high_resolution_clock::now();

        cout<<" test case 3 taget element index:" << bsalgoritm(arr22,500,793);
            auto stop = high_resolution_clock::now();
    auto duration = duration_cast<nanoseconds>(stop - start);
    cout << "Execution time for : " << duration.count() << " nanoseconds" << endl;
}
{
    int arr23[] =  {
        562, 437, 994, 789, 107, 888, 473, 341, 626, 798,
982, 601, 912, 236, 529, 805, 443, 149, 732, 611,
924, 867, 289, 315, 876, 754, 408, 958, 713, 525,
471, 383, 955, 244, 160, 921, 397, 281, 847, 703,
523, 370, 272, 118, 927, 678, 205, 796, 595, 462,
832, 301, 745, 267, 628, 471, 156, 794, 690, 511,
525, 389, 705, 613, 251, 919, 690, 865, 423, 582,
346, 953, 570, 880, 420, 385, 726, 790, 603, 515,
482, 188, 963, 291, 882, 426, 802, 321, 998, 400,
127, 742, 969, 502, 842, 451, 326, 798, 292, 680,

879, 231, 583, 957, 468, 146, 571, 888, 630, 369,
544, 839, 164, 590, 935, 727, 451, 884, 328, 719,
254, 899, 678, 160, 932, 407, 546, 684, 190, 578,
446, 341, 849, 229, 481, 987, 376, 944, 118, 802,
409, 588, 943, 392, 872, 268, 664, 415, 901, 363,
374, 593, 764, 541, 759, 679, 803, 450, 687, 905,
148, 973, 824, 321, 346, 613, 599, 563, 889, 518,
721, 217, 640, 880, 264, 817, 995, 527, 210, 706,
508, 897, 759, 604, 149, 701, 985, 374, 696, 581,
467, 808, 713, 194, 832, 657, 213, 576, 842, 993,

373, 203, 425, 926, 460, 128, 777, 365, 588, 462,
184, 937, 772, 669, 908, 334, 696, 575, 318, 867,
312, 561, 753, 458, 917, 205, 335, 590, 846, 429,
486, 274, 936, 655, 123, 944, 872, 444, 689, 539,
618, 262, 998, 349, 651, 470, 892, 603, 782, 930,
438, 276, 602, 567, 300, 998, 612, 785, 954, 553,
394, 631, 926, 379, 876, 503, 659, 142, 966, 409,
505, 850, 695, 429, 943, 237, 749, 533, 321, 985,
625, 192, 882, 703, 566, 972, 734, 167, 812, 499,
790, 653, 930, 566, 444, 368, 983, 213, 546, 877,
183, 921, 342, 715, 495, 625, 890, 319, 952, 176,
536, 830, 681, 484, 292, 757, 939, 618, 269, 503,
878, 627, 169, 905, 752, 318, 976, 402, 714, 852,
299, 577, 448, 675, 324, 803, 277, 937, 433, 508,
584, 927, 183, 597, 778, 640, 815, 360, 520, 778,
902, 161, 765, 986, 273, 604, 483, 720, 957, 308,
324, 596, 817, 229, 476, 753, 634, 540, 221, 974,
784, 202, 599, 855, 245, 694, 355, 901, 470, 845,
403, 712, 691, 324, 556, 791, 997, 499, 254, 884,
423, 739, 615, 452, 939, 620, 260, 734, 351, 974,

830, 320, 591, 461, 276, 663, 819, 538, 361, 573,
230, 718, 887, 646, 297, 794, 551, 497, 277, 981,
729, 561, 924, 338, 800, 637, 556, 241, 977, 531,
199, 658, 992, 473, 183, 875, 289, 998, 362, 716,
659, 782, 370, 440, 825, 269, 847, 614, 789, 946,
703, 251, 640, 798, 586, 922, 467, 562, 302, 739,
814, 162, 680, 464, 905, 251, 692, 810, 298, 635,
864, 159, 949, 561, 307, 991, 240, 855, 579, 781,
865, 413, 920, 543, 274, 639, 925, 215, 591, 702,
759, 442, 639, 975, 214, 561, 482, 998, 322, 814,

956, 327, 545, 836, 297, 703, 479, 934, 300, 653,
284, 957, 706, 546, 667, 924, 431, 264, 826, 789,
368, 630, 854, 275, 900, 679, 522, 986, 387, 621,
993, 436, 554, 227, 875, 646, 399, 821, 647, 275,
768, 244, 846, 999, 482, 594, 326, 473, 701, 212,
736, 990, 354, 446, 667, 296, 881, 523, 619, 914,
800, 190, 847, 737, 690, 937, 563, 429, 631, 456,
993, 524, 673, 828, 372, 934, 527, 668, 865, 944,
382, 721, 495, 589, 331, 854, 605, 749, 625, 203,
968, 214, 635, 778, 292, 570, 648, 931, 378, 853



    };
    sort (arr23,arr23+1000);
            auto start = high_resolution_clock::now();

        cout<<" test case 4 taget element index:" << bsalgoritm(arr23,1000,523);
            auto stop = high_resolution_clock::now();
    auto duration = duration_cast<nanoseconds>(stop - start);
    cout << "Execution time for : " << duration.count() << " nanoseconds" << endl;
}
{
int arr24[]= {10,20,30,40,50};
    std :: sort(arr24,arr24+7);
        auto start = high_resolution_clock::now();

    cout<<" test case 5 taget element index:" << bsalgoritm(arr24,5,40);
        auto stop = high_resolution_clock::now();
    auto duration = duration_cast<nanoseconds>(stop - start);
    cout << "Execution time for : " << duration.count() << " nanoseconds" << endl;
}
    return 0;

}